openapi: 3.0.0
info:
  title: Survey Management API
  version: 1.0.0
  description:  This API allows you to manage surveys, questions, options, and participant responses, including scoring and correctness of answers.

paths:
  /survey:
    post:
      tags:
        - Survey
      summary: Create a new survey
      operationId: createSurvey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '201':
          description: Survey created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '403':
            description: Forbidden - user not authorized to perform this action
    get:
      tags:
        - Survey
      summary: Get all surveys
      operationId: getSurveys
      responses:
        '200':
          description: List of all surveys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        '403':
            description: Forbidden - user not authorized to perform this action

  /survey/{surveyId}:
    get:
      tags:
        - Survey
      summary: Get a survey by ID
      operationId: getSurvey
      parameters:
        - in: path
          name: surveyId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Survey found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '404':
          description: Survey not found
        '403':
            description: Forbidden - user not authorized to perform this action
    
    put:
      tags:
        - Survey
      summary: Update a survey
      description: Cannot update a survey if it is locked (locked = true)
      operationId: updateSurvey
      parameters:
        - in: path
          name: surveyId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '200':
          description: Survey updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '403':
          description: Forbidden - survey is locked or user not authorized to perform this action

        '404':
          description: Survey not found
    delete:
      tags:
        - Survey
      summary: Delete a survey
      description: Cannot delete a survey if it is locked (locked = true)
      operationId: deleteSurvey
      parameters:
        - in: path
          name: surveyId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Survey deleted successfully
        '403':
          description: Forbidden - survey is locked or user not authorized to perform this action

        '404':
          description: Survey not found
        
  /survey/{surveyId}/question/{questionId}:
    post:
      tags:
        - Survey
      summary: Assign a question to a survey
      operationId: assignQuestionToSurvey
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: integer
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Question successfully assigned to survey
        '403':
          description: Forbidden - survey or question is locked or user not authorized to perform this action
        '404':
          description: Survey or question not found
    delete:
      tags:
        - Survey
      summary: Unassign a question from a survey
      operationId: unassignQuestionFromSurvey
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: integer
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Question successfully unassigned from survey
        '403':
          description: Forbidden - survey or question is locked or user not authorized to perform this action
        '404':
          description: Survey or question not found
  
  /surveyResponse:
    post:
      tags:
        - SurveyResponse
      summary: Submit a complete survey response
      operationId: submitResponseSurvey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyResponse'
      responses:
        '201':
          description: Response survey submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyResponse'

  /surveyResponse/{surveyResponseId}:
    get:
      tags:
        - SurveyResponse
      summary: Get a response survey by ID
      operationId: getResponseSurveyById
      parameters:
        - name: surveyResponseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response survey found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyResponse'
        '404':
          description: Response survey not found
        
  

  /question:
    post:
      tags:
        - Question
      summary: Create a new question
      operationId: createQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '201':
          description: Question created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: Invalid input
        '403':
            description: Forbidden - user not authorized to perform this action

    get:
      tags:
        - Question
      summary: Get all questions
      operationId: getAllQuestions
      responses:
        '200':
          description: List of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '403':
            description: Forbidden - user not authorized to perform this action

  /question/{questionId}:
    get:
      tags:
        - Question
      summary: Get a question by ID
      operationId: getQuestionById
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Question found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '403':
          description: Forbidden - response is locked or user not authorized to perform this action
        '404':
          description: Question not found

    put:
      tags:
        - Question
      summary: Update a question
      operationId: updateQuestion
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: Question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '403':
          description: Forbidden - response is locked or user not authorized to perform this action
        '404':
          description: Question not found

    delete:
      tags:
        - Question
      summary: Delete a question
      operationId: deleteQuestion
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Question deleted
        '403':
          description: Forbidden - response is locked or user not authorized to perform this action
        '404':
          description: Question not found
  /question/by-subject/{subject}:
    get:
      tags:
        - Question
      summary: Get questions by subject
      operationId: getQuestionsBySubject
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of questions with the given subject
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '404':
          description: No questions found for the given subject
        '403':
            description: Forbidden - user not authorized to perform this action
        
  
  /questionResponse:
    post:
      tags:
        - QuestionResponse
      summary: Submit responses to a question
      operationId: submitResponseToQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionResponse'
      responses:
        '201':
          description: Response to question submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        

    get:
      tags:
        - QuestionResponse
      summary: Get all responses to questions
      operationId: getAllResponseQuestions
      responses:
        '200':
          description: List of question responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionResponse'

  /questionResponse/{questionResponseId}:
    get:
      tags:
        - QuestionResponse
      summary: Get a response to a question by ID
      operationId: getQuestionResponseById
      parameters:
        - in: path
          name: questionResponseId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response to question found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '404':
          description: Response not found

    put:
      tags:
        - QuestionResponse
      summary: Update a response to a question
      operationId: updateQuestionResponse
      parameters:
        - in: path
          name: questionResponseId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionResponse'
      responses:
        '200':
          description: Response updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '404':
          description: Response not found

    delete:
      tags:
        - QuestionResponse
      summary: Delete a response to a question
      operationId: deleteQuestionResponse
      parameters:
        - in: path
          name: questionResponseId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Response deleted
        '404':
          description: Response not found

  /question/{questionId}/Option:
    post:
      tags:
        - Option
      summary: Create an option for a question
      operationId: createOption
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Option'
      responses:
        '201':
          description: Option created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Option'
        '403':
            description: Forbidden - user not authorized to perform this action
    get:
      tags:
        - Option
      summary: Get all options for a question
      operationId: getAllOptions
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Option'
        '403':
            description: Forbidden - user not authorized to perform this action

  /question/{questionId}/option/{optionId}:
    get:
      tags:
        - Option
      summary: Get a specific option
      operationId: getOptionById
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: integer
        - in: path
          name: optionId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: option found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Option'
        '404':
          description: option not found
        '403':
            description: Forbidden - user not authorized to perform this action
    put:
      tags:
        - Option
      summary: Update an option
      description: Cannot update an option if it is locked (locked = true)
      operationId: updateOption
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: integer
        - in: path
          name: optionId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Option'
      responses:
        '200':
          description: option updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Option'
        '403':
          description: Forbidden - option is locked or user not authorized to perform this action
        '404':
          description: option not found
    delete:
      tags:
        - Option
      summary: Delete an option
      description: Only allowed if option is not locked
      operationId: deleteOption
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: integer
        - in: path
          name: optionId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Option deleted
        '403':
          description: Forbidden - option is locked or user not authorized to perform this action
        '404':
          description: Option not found
  
  

  /OptionResponse:
    post:
      tags:
        - OptionResponse
      summary: Submit a response option
      operationId: createOptionResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptionResponse'
      responses:
        '201':
          description: Option response successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionResponse'
        

    get:
      tags:
        - OptionResponse
      summary: Get all option response
      operationId: getAllOptionResponse
      responses:
        '200':
          description: List of option responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionResponse'
        '404':
          description: not found

  /optionResponse/{optionResponseId}:
    get:
      tags:
        - OptionResponse
      summary: Get an option response by ID
      operationId: getResponseOptionById
      parameters:
        - name: optionResponseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response option details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionResponse'
        '404':
          description: not found
    
  

    put:
      tags:
        - OptionResponse
      summary: Update a response option
      operationId: updateResponseOption
      parameters:
        - name: optionResponseId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptionResponse'
      responses:
        '200':
          description: Response option updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionResponse'
        '404':
          description: not found

    delete:
      tags:
        - OptionResponse
      summary: Delete an option response
      operationId: deleteOptionResponse
      parameters:
        - name: optionResponseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: not found
 
  /optionResponse/{questionResponseId}:
    get:
      tags:
        - OptionResponse
      summary: Get list of option responses by questionResponseId
      operationId: getResponseOptionsByQuestionResponseId
      parameters:
        - name: questionResponseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: option Responses details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionResponse'
        '404':
          description: not found
          
    


components:
  schemas:
    Survey:
      type: object
      properties:
        surveyId:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        type:
          type: string
          enum: [feedback, exam]
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [draft, active, closed]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deadline:
          type: string
          format: date-time
        locked:
          type: boolean
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
      required:
        - surveyId
        - organisationId
        - departmentId
        - ownerId
        - type
        - title
        - status
        - created_at
        - updated_at

    Question:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        subject:
          type: string
        questionText:
          type: string
        questionType:
          type: string
          enum:
            - rating_scale_icons
            - free_text
            - date_picker
            - multiple_choice_text
            - multiple_choice_image
            - numeric_scale
            - yes_no
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
        
        locked:
          type: boolean
      required:
        - questionId
        - subject
        - question_text
        - question_type
        - options
        - locked

    
   
    Option:
      type: object
      properties:
        optionId:
          type: integer
          format: int64
        questionId:
          type: integer
          format: int64
        optionText:
          type: string
        isCorrect:
          type: boolean
          description: Indicates whether the option is correct (useful for multiple-choice questions)
        optionScore:
          type: integer
          description: Score assigned to this option if it is correct
        isLocked:
          type: boolean
        freeText:
          type: string
          description: Free text input if the answer is an open-ended response
      required:
        - optionId
        - optionText
        - isCorrect
        - score
        - isLocked
        
    OptionResponse:
      type: object
      properties:
        optionResponseId:
          type: integer
          format: int64
        optionId:
          type: integer
          format: int64
        questionResponseId:
          type: integer
          format: int64
        optionText:
          type: string
        isCorrect:
          type: boolean
          description: Indicates whether the option is correct 
        isSelected:
          type: boolean
        freeText:
          type: string
          description: Free text input if the answer is an open-ended response
        score:
          type: integer
          description: Score assigned to this option if it is correct
      required:
        - optionResponseId
        - optionId
        - responseId
        - optionText
        - isCorrect
        - score
        - submittedAt
        - isSelected
        
    QuestionResponse:
      type: object
      properties:
        questionResponseId:
          type: integer
          format: int64
        questionId:
          type: integer
          format: int64
        questionText:
          type: string
        optionResponse:
          type: array
          items: 
            $ref: '#/components/schemas/OptionResponse'
        score:
          type: number
          format: float
        submittedAt:
          type: string
          format: date-time
      required:
        - questionResponseId
        - questionId
    
       
    SurveyResponse:
      type: object
      properties:
        surveyResponseId:
          type: integer
          format: int64
        surveyId:
          type: integer
          format: int64
        respondentId:
          type: integer
          format: int64
        submittedAt:
          type: string
          format: date-time
        totalScore:
          type: integer
          description: Total score obtained by the respondent (useful for exams)
        questionResponse:
          type: array
          items:
            $ref: '#/components/schemas/QuestionResponse'
      required:
        - responseSurveyId
        - surveyId
        - respondentId
        - submittedAt
        - responseOptions    

















